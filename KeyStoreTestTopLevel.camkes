/**
 * Copyright (C) 2019, Hensoldt Cyber GmbH
 */
import <std_connector.camkes>;

import "components/TestApplication/TestApplication.camkes";
import "components/CryptoServer/CryptoServer.camkes";
import "components/ChanMux/ChanMux.camkes";
import "components/Uart/Uart.camkes";

assembly {
    composition {
        component   TestApplication     testApplication;
        component   CryptoServer        cryptoServer;
        component   ChanMux             chanMux;
        component   UartDev             uartDev;
        component   UartDrv             uartDrv;

        connection  seL4RPCCall         main_chanmux            (from testApplication.ChanMuxRpc, to chanMux.ChanMuxIn);
        connection  seL4RPCCall         crypto_chanmux          (from cryptoServer.ChanMuxRpc, to chanMux.ChanMuxIn);

        connection  seL4RPCCall         chanmux_uart            (from chanMux.Output, to uartDrv.UartDrv);
        connection  seL4RPCCall         uart_chanmux            (from uartDrv.Output, to chanMux.ChanMuxOut);

        connection  seL4SharedData      uart_dataConnection     (from chanMux.outputDataPort, to uartDrv.inputDataPort);
        connection  seL4SharedData      mainDataConnection      (from testApplication.chanMuxDataPort, to chanMux.mainDataPort);
        connection  seL4SharedData      cryptoDataConnection    (from cryptoServer.chanMuxDataPort, to chanMux.mainDataPort);

        connection  seL4Notification    dataAvailableMain       (from chanMux.dataAvailableMain, to testApplication.ChanMuxSignal_dataAvailable);
        connection  seL4Notification    dataAvailableCrypto     (from chanMux.dataAvailableMain, to cryptoServer.ChanMuxSignal_dataAvailable);

        connection  seL4HardwareMMIO    uart_memio              (from uartDrv.uartRegBase, to uartDev.uartRegBase);

        connection seL4SharedData       cryptoData              (from testApplication.cryptoClientDataport, to cryptoServer.cryptoServerDataport);
        connection seL4RPCCall          cryptoRpc               (from testApplication.Crypto, to cryptoServer.Crypto);
        connection seL4RPCCall          seosCryptoRpc           (from testApplication.SeosCryptoRpc, to cryptoServer.SeosCryptoRpc);

        connection seL4SharedData       keyStoreData            (from testApplication.keyStoreClientDataport, to cryptoServer.keyStoreServerDataport);
        connection seL4RPCCall          keyStoreRpc             (from testApplication.KeyStore, to cryptoServer.KeyStore);
        connection seL4RPCCall          seosKeyStoreRpc         (from testApplication.SeosKeyStoreRpc, to cryptoServer.SeosKeyStoreRpc);
    }
    configuration {
        uartDev.uartRegBase_paddr  = 0xE0000000;
        uartDev.uartRegBase_size   = 0x1000;

        uartDrv.inputDataPort       = "R";
    }
}

